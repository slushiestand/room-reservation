{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nvar exampleInitialState = {\n  lastUpdate: 0,\n  light: false,\n  count: 0\n};\nexport var actionTypes = {\n  TICK: 'TICK',\n  INCREMENT: 'INCREMENT',\n  DECREMENT: 'DECREMENT',\n  RESET: 'RESET' // REDUCERS\n\n};\nexport var reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exampleInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.TICK:\n      return _Object$assign({}, state, {\n        lastUpdate: action.ts,\n        light: !!action.light\n      });\n\n    case actionTypes.INCREMENT:\n      return _Object$assign({}, state, {\n        count: state.count + 1\n      });\n\n    case actionTypes.DECREMENT:\n      return _Object$assign({}, state, {\n        count: state.count - 1\n      });\n\n    case actionTypes.RESET:\n      return _Object$assign({}, state, {\n        count: exampleInitialState.count\n      });\n\n    default:\n      return state;\n  }\n}; // ACTIONS\n\nexport var serverRenderClock = function serverRenderClock(isServer) {\n  return function (dispatch) {\n    return dispatch({\n      type: actionTypes.TICK,\n      light: !isServer,\n      ts: _Date$now()\n    });\n  };\n};\nexport var startClock = function startClock(dispatch) {\n  return setInterval(function () {\n    // Dispatch `TICK` every 1 second\n    dispatch({\n      type: actionTypes.TICK,\n      light: true,\n      ts: _Date$now()\n    });\n  }, 1000);\n};\nexport var incrementCount = function incrementCount() {\n  return function (dispatch) {\n    return dispatch({\n      type: actionTypes.INCREMENT\n    });\n  };\n};\nexport var decrementCount = function decrementCount() {\n  return function (dispatch) {\n    return dispatch({\n      type: actionTypes.DECREMENT\n    });\n  };\n};\nexport var resetCount = function resetCount() {\n  return function (dispatch) {\n    return dispatch({\n      type: actionTypes.RESET\n    });\n  };\n};\nexport function initializeStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exampleInitialState;\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n}","map":{"version":3,"sources":["C:\\Projects\\room-reservation\\with-redux-app\\store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunkMiddleware","exampleInitialState","lastUpdate","light","count","actionTypes","TICK","INCREMENT","DECREMENT","RESET","reducer","state","action","type","ts","serverRenderClock","isServer","dispatch","startClock","setInterval","incrementCount","decrementCount","resetCount","initializeStore","initialState"],"mappings":"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","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\n\nconst exampleInitialState = {\n  lastUpdate: 0,\n  light: false,\n  count: 0\n}\n\nexport const actionTypes = {\n  TICK: 'TICK',\n  INCREMENT: 'INCREMENT',\n  DECREMENT: 'DECREMENT',\n  RESET: 'RESET'\n}\n\n// REDUCERS\nexport const reducer = (state = exampleInitialState, action) => {\n  switch (action.type) {\n    case actionTypes.TICK:\n      return Object.assign({}, state, {\n        lastUpdate: action.ts,\n        light: !!action.light\n      })\n    case actionTypes.INCREMENT:\n      return Object.assign({}, state, {\n        count: state.count + 1\n      })\n    case actionTypes.DECREMENT:\n      return Object.assign({}, state, {\n        count: state.count - 1\n      })\n    case actionTypes.RESET:\n      return Object.assign({}, state, {\n        count: exampleInitialState.count\n      })\n    default:\n      return state\n  }\n}\n\n// ACTIONS\nexport const serverRenderClock = isServer => dispatch => {\n  return dispatch({ type: actionTypes.TICK, light: !isServer, ts: Date.now() })\n}\n\nexport const startClock = dispatch => {\n  return setInterval(() => {\n    // Dispatch `TICK` every 1 second\n    dispatch({ type: actionTypes.TICK, light: true, ts: Date.now() })\n  }, 1000)\n}\n\nexport const incrementCount = () => dispatch => {\n  return dispatch({ type: actionTypes.INCREMENT })\n}\n\nexport const decrementCount = () => dispatch => {\n  return dispatch({ type: actionTypes.DECREMENT })\n}\n\nexport const resetCount = () => dispatch => {\n  return dispatch({ type: actionTypes.RESET })\n}\n\nexport function initializeStore (initialState = exampleInitialState) {\n  return createStore(\n    reducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(thunkMiddleware))\n  )\n}\n"]},"metadata":{},"sourceType":"module"}